# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Pipeline

env:
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  APP_HOST: ${{ vars.APP_HOST }}
  DOCKER_IMAGE_TAG: gearoid9/gotreasa-berlin-clock:latest
  CLAIR_DB: arminc/clair-db:latest
  CLAIR_SCAN: arminc/clair-local-scan
  CLAIR_VERSION: v12
  CHEF_LICENSE_KEY: ${{ secrets.CHEF_LICENSE_KEY }}
  DOCKER_USERNAME: gearoid9

on:
  push:
    branches: [main]
  pull_request_target:
    branches: [main]

jobs:
  test_swagger_editor_validator_remote:
    runs-on: ubuntu-latest
    name: Swagger Editor Validator Remote

    steps:
      - uses: actions/checkout@main
      - name: Validate OpenAPI definition
        uses: char0n/swagger-editor-validate@master
        with:
          definition-file: openapi.json

  commitlint:
    name: Verify commits are linted
    runs-on: ubuntu-latest
    if: ${{ github.actor }} != "dependabot[bot]"
    steps:
      - name: ü™™ Check if it's Dependabot's PR
        run: |
          echo "The github actor is '${{ github.actor }}'"
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@master

  hadolint:
    name: Verify dockerfile is linted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: hadolint/hadolint-action@master
        with:
          dockerfile: Dockerfile

  eslint-verify:
    runs-on: ubuntu-latest
    steps:
      - name: üìÇ Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Lint the code
        run: npm run lint:verify --
          --format @microsoft/eslint-formatter-sarif
          --output-file eslint-results.sarif
        continue-on-error: true
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  inspec:
    name: Unit test docker image
    needs: [hadolint]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@main

      - name: üíø Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec

      - name: Run Inspec tests
        run: inspec exec test/container/unit/*.rb --chef-license accept-silent

  prettier-verify:
    runs-on: ubuntu-latest
    steps:
      - name: üìÇ Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Prettify the code
        run: npm run prettier:verify

  detect-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: üìÇ Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Detect any secrets in the code
        run: npm run detect-secrets $(git ls-files)

  snyk_test:
    runs-on: ubuntu-latest
    needs: [eslint-verify, prettier-verify]

    steps:
      - uses: actions/checkout@main
      - name: Test the dependencies for security vulnerabilities
        uses: snyk/actions/node@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
      - name: Test the code for security vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code
          args: test --sarif-file-output=snyk-code.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

  test_and_coverage:
    runs-on: ubuntu-latest
    needs:
      [
        eslint-verify,
        hadolint,
        prettier-verify,
        test_swagger_editor_validator_remote,
      ]

    steps:
      - uses: warchant/setup-sonar-scanner@master
      - name: üíø Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
      - name: üìÇ Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - name: Run all of the tests
        run: npm test
      - name: run the Sonar Scanner
        run: sonar-scanner
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests # Name of the check run which will be created
          path: reports/jest-junit.xml* # Path to test results
          reporter: jest-junit # Format of test results
      - name: Publish Test Report
        if: always() # Forces this step to always run
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: 'reports/jest-junit.xml*'
          require_tests: true
          check_name: Jest Results

  pact_test:
    runs-on: ubuntu-latest
    needs:
      [eslint-verify, prettier-verify, test_swagger_editor_validator_remote]

    steps:
      - name: üìÇ Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - run: npm run test:api:consumer
      - run: npm run publish:pact
      - run: export CI=true && npm run test:api:provider
      - run: npm start &
      - run: |
          ./test/scripts/generate_postman.sh
          npx newman run pact/postman/collections/postman_collection.json -r cli,json --env-var 'url=http://localhost:9080'

  build_image:
    runs-on: ubuntu-latest
    needs:
      [
        pact_test,
        test_and_coverage,
        detect-secrets,
        commitlint,
        snyk_test,
        inspec,
      ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAG }}

  check_container_structure:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: üîë Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: Run tests on the container structure
        uses: plexsystems/container-structure-test-action@main
        with:
          image: ${{ env.DOCKER_IMAGE_TAG }}
          config: test/container/structure/config.yaml

  check_container_runs_correctly:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: Run the goss tests on the image
        run: |
          docker run --name goss aelsabbahy/goss goss
          docker run --rm -d --volumes-from goss --name app ${{ env.DOCKER_IMAGE_TAG }}
          sleep 20
          docker exec app /goss/goss validate --format tap

  check_container_efficiency:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: Analyse the container for waste using dive
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive:latest --ci ${{ env.DOCKER_IMAGE_TAG }} \
            --lowestEfficiency=0.90 --highestUserWastedPercent=0.20 \
            --highestWastedBytes=40MB

  check_container_security_with_snyk:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}
      - uses: actions/setup-node@main
        with:
          node-version: 18.17
          cache: 'npm'
      - name: üóÇÔ∏è Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Run Security test on container image
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm ci
          npx snyk container test ${{ env.DOCKER_IMAGE_TAG }} --file=Dockerfile --fail-on=upgradable --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  check_container_software_list:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: üöì Generate SBOM
        run: |
          echo "üîå Install Anchore/Syft"
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          echo "üìÅ catalogue the versions inside the container..."
          syft ${{ env.DOCKER_IMAGE_TAG }} --scope all-layers \
            -o spdx-json=/tmp/syft/sbom.spdx.json \
            -o table

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Scan image
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.DOCKER_IMAGE_TAG }}
          severity-cutoff: high
          output-format: sarif

      - name: ‚è´ Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  check_container_security_with_trivy:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: üèÉ‚Äç‚ôÇÔ∏è Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: ‚è´ Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  check_container_security_with_clair:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ‚è¨ Pull the container image for testing
        run: docker pull ${{ env.DOCKER_IMAGE_TAG }}

      - name: üöì Check - Image scan by Clair
        run: |
          mkdir ./report
          echo "üîå Download the latest clair-scanner version"
          wget --no-verbose https://github.com/arminc/clair-scanner/releases/download/${{ env.CLAIR_VERSION }}/clair-scanner_linux_amd64
          echo "üìÄ Install clair-scanner"
          mv ./clair-scanner_linux_amd64 ./clair-scanner
          chmod +x ./clair-scanner
          echo "üëâ Run ${{ env.CLAIR_DB }}"
          docker run --rm -d --name clair-db ${{ env.CLAIR_DB }}
          echo "üëâ Run ${{ env.CLAIR_SCAN }}"
          docker run --rm -p 6060:6060 --link clair-db:postgres -d --name clair ${{ env.CLAIR_SCAN }}
          echo "‚ÑπÔ∏è getting MY_IP"
          MY_IP=$(ifconfig eth0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
          sleep 10
          echo "‚ÑπÔ∏è getting CLAIR_IP"
          CLAIR_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' clair)
          echo "üëâ run clair-scanner on $MY_IP pointing http://$CLAIR_IP:6060"
          ./clair-scanner --ip $MY_IP --clair http://$CLAIR_IP:6060 -t High --reportAll=false ${{ env.DOCKER_IMAGE_TAG }} | tee ./report/clair-image-scan-report.txt
          echo "üßπ clean up"
          docker stop clair
          docker stop clair-db
          sleep 5
          docker image rm ${{ env.CLAIR_DB }}

  # deploy:
  #   needs:
  #     [
  #       check_container_efficiency,
  #       check_container_runs_correctly,
  #       check_container_security_with_clair,
  #       check_container_security_with_snyk,
  #       check_container_security_with_trivy,
  #       check_container_software_list,
  #       check_container_structure,
  #     ]
  #   uses: ./.github/workflows/deploy.yml
  #   with:
  #     environment: test
  #   secrets: inherit

  snyk_monitor:
    runs-on: ubuntu-latest
    needs:
      [
        check_container_efficiency,
        check_container_runs_correctly,
        check_container_security_with_clair,
        check_container_security_with_snyk,
        check_container_security_with_trivy,
        check_container_software_list,
        check_container_structure,
      ]

    steps:
      - uses: actions/checkout@main
      - name: Run the Snyk monitor
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects
