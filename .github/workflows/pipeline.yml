# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Pipeline

env:
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  APP_HOST: ${{ vars.APP_HOST }}
  OKTETO_TOKEN: ${{ secrets.OKTETO_TOKEN }}
  OKTETO_REGISTRY: registry.cloud.okteto.net
  OKTETO_DEV_IMAGE_TAG: registry.cloud.okteto.net/gotreasa/gotreasa-berlin-clock-gotreasa-berlin-clock:build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test_swagger_editor_validator_remote:
    runs-on: ubuntu-latest
    name: Swagger Editor Validator Remote

    steps:
      - uses: actions/checkout@main
      - name: Validate OpenAPI definition
        uses: char0n/swagger-editor-validate@master
        with:
          definition-file: openapi.json

  commitlint:
    name: Verify commits are linted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@master

  hadolint:
    name: Verify dockerfile is linted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: hadolint/hadolint-action@master
        with:
          dockerfile: Dockerfile

  eslint-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Lint the code
        run: npm run lint:verify --
          --format @microsoft/eslint-formatter-sarif
          --output-file eslint-results.sarif
        continue-on-error: true
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  inspec:
    name: Unit test docker image
    needs: [hadolint]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@main

      - name: Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec

      - name: Run Inspec tests
        run: inspec exec test/container/unit/*.rb --chef-license accept

  prettier-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Prettify the code
        run: npm run prettier:verify

  detect-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Detect any secrets in the code
        run: npm run detect-secrets $(git ls-files)

  snyk_test:
    runs-on: ubuntu-latest
    needs: [eslint-verify, prettier-verify]

    steps:
      - uses: actions/checkout@main
      - name: Test the dependencies for security vulnerabilities
        uses: snyk/actions/node@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: Test the code for security vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code
          args: test --sarif-file-output=snyk-code.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif

  test_and_coverage:
    runs-on: ubuntu-latest
    needs:
      [
        eslint-verify,
        hadolint,
        prettier-verify,
        test_swagger_editor_validator_remote,
      ]

    steps:
      - uses: warchant/setup-sonar-scanner@master
      - name: Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - name: Run all of the tests
        run: npm test
      - name: run the Sonar Scanner
        run: sonar-scanner
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests # Name of the check run which will be created
          path: reports/jest-junit.xml* # Path to test results
          reporter: jest-junit # Format of test results
      - name: Publish Test Report
        if: always() # Forces this step to always run
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: 'reports/jest-junit.xml*'
          require_tests: true
          check_name: Jest Results

  pact_test:
    runs-on: ubuntu-latest
    needs:
      [eslint-verify, prettier-verify, test_swagger_editor_validator_remote]

    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - run: npm run test:api:consumer
      - run: npm run publish:pact
      - run: export CI=true && npm run test:api:provider
      - run: npm start &
      - run: |
          ./test/scripts/generate_postman.sh
          npx newman run pact/postman/collections/postman_collection.json -r cli,json --env-var 'url=http://localhost:9080'

  can-i-deploy:
    runs-on: ubuntu-latest
    needs: [pact_test]
    steps:
      - uses: warchant/setup-sonar-scanner@master
      - name: Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Check if it can be deployed
        run: |
          npx pact-broker can-i-deploy --pacticipant berlin_clock_app \
            --version $(npx absolute-version) \
            --participant berlin_clock_client \
            --version $(git rev-parse --short HEAD)-$(git branch \
            --show-current)+$(git rev-parse --short HEAD) \
            --broker-base-url https://gotreasa.pactflow.io \
            --broker-token ${{ secrets.PACT_BROKER_TOKEN }} \
            --to-environment test
          echo "🚂 The Test environment can be deployed"

  build_image:
    runs-on: ubuntu-latest
    needs:
      [
        pact_test,
        test_and_coverage,
        detect-secrets,
        commitlint,
        snyk_test,
        inspec,
      ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@master
        with:
          images: ${{ env.REGISTRY }}/gotreasa/gotreasa-berlin-clock

      - name: Build and push Docker image
        uses: docker/setup-buildx-action@master
      - uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.OKTETO_DEV_IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  check_container_structure:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: Run tests on the container structure
        uses: plexsystems/container-structure-test-action@main
        with:
          image: ${{ env.OKTETO_DEV_IMAGE_TAG }}
          config: test/container/structure/config.yaml

  check_container_runs_correctly:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: Run the goss tests on the image
        run: |
          docker run --name goss aelsabbahy/goss goss
          docker run --rm -d --volumes-from goss --name app ${{ env.OKTETO_DEV_IMAGE_TAG }}
          sleep 20
          docker exec app /goss/goss validate --format tap

  check_container_efficiency:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: Analyse the container for waste using dive
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive:latest --ci ${{ env.OKTETO_DEV_IMAGE_TAG }} \
            --lowestEfficiency=0.90 --highestUserWastedPercent=0.20 \
            --highestWastedBytes=40MB

  check_container_security:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Check out the repo
        uses: actions/checkout@main

      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Run Security test on container image
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm ci
          npx snyk container test ${{ env.OKTETO_DEV_IMAGE_TAG }} --file=Dockerfile --fail-on=upgradable --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  check_container_software_list:
    runs-on: ubuntu-latest
    needs: [build_image]
    steps:
      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: 🚓 Generate SBOM
        run: |
          echo "🔌 Install Anchore/Syft"
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          echo "📁 catalogue the versions inside the container..."
          syft ${{ env.OKTETO_DEV_IMAGE_TAG }} --scope all-layers \
            -o table

  check_container_vulnerabilites:
    runs-on: ubuntu-latest
    # needs: [build_image]
    steps:
      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull the container image for testing
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: 🐞 Check for container vulnerabilities
        run: |
          docker run --rm \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          --name Grype anchore/grype:latest \
          ${{ env.OKTETO_DEV_IMAGE_TAG }}

  deploy_image:
    runs-on: ubuntu-latest
    needs:
      [
        can-i-deploy,
        check_container_structure,
        check_container_runs_correctly,
        check_container_efficiency,
        check_container_security,
        check_container_software_list,
      ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci

      - name: Log in to Okteto Container Registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.OKTETO_REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.OKTETO_TOKEN }}

      - name: Pull latest image
        run: docker pull ${{ env.OKTETO_DEV_IMAGE_TAG }}

      - name: Install okteto CLI
        run: curl https://get.okteto.com -sSfL | sh

      - name: Setup the Okteto context
        run: okteto context use --token ${{ secrets.OKTETO_TOKEN }}

      - name: Deploy the containers using Okteto
        run: |
          okteto pipeline deploy --wait
          npx pact-broker record-deployment \
          --broker-base-url https://gotreasa.pactflow.io \
          --broker-token $PACT_BROKER_TOKEN \
          --pacticipant berlin_clock_app \
          --version $(git rev-parse --short HEAD)-$(git branch --show-current)+$(git rev-parse --short HEAD) \
          --environment test
          echo "🚀 Marked $(git rev-parse --short HEAD)-$(git branch --show-current)+$(git rev-parse --short HEAD) as deployed"

  smoke_test:
    runs-on: ubuntu-latest
    needs: [deploy_image]
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: 18.16
          cache: 'npm'
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - name: Smoke test using pact tests
        run: npm run test:api:consumer && export SMOKE_TEST=true && npm run test:api:provider -- --collectCoverage=false
      - run: |
          ./test/scripts/generate_postman.sh
          npx newman run pact/postman/collections/postman_collection.json -r cli,json --env-var 'url=${{ env.APP_HOST }}'

  snyk_monitor:
    runs-on: ubuntu-latest
    needs: [deploy_image]

    steps:
      - uses: actions/checkout@main
      - name: Run the Snyk monitor
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

  dast_scan:
    runs-on: ubuntu-latest
    needs: [deploy_image]
    steps:
      - uses: actions/checkout@main
      - name: Run Dastardly Action Step
        continue-on-error: true # This allows subsequent steps to run even if this step fails
        uses: PortSwigger/dastardly-github-action@main
        with:
          target-url: ${{ env.APP_HOST }}/api-docs/
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: Dastardly Tests # Name of the check run which will be created
          path: '**/dastardly-report.xml' # Path to test results
          reporter: jest-junit # Format of test results
      - name: Publish Test Report
        if: always() # Forces this step to always run
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: '**/dastardly-report.xml' # You need to update this path if you pass in a different output filename to the Dastardly action
          require_tests: true
          check_name: DAST Scan Results
